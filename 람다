람다식 (Lamda Expressions)
  - 익명 함수를 생성하기 위한 식
  - 객체 지향 언어보다 함수 지향 언어
  - 객체 지향 프로그램과 함수적 프로그래밍을 혼합함으로써 더 효율적인 프로그래밍 가능

자바에서 람다식을 사용하능 이유
  - 코드 간결
  - 필터링 또는 매핑을 통해 대용량 데이터를 쉽게 집계
  - 반복에서는 실행 속도 느림

람다식의 형태
  - Runnable runnable = () > {}
  - 인터페이스 변수 = 람다식
  - 매개변수를 가진 코드 블록
  - 인터페이스 변수에 대입
  - 하나의 메서드 정의
  - 런타임 시에는 익명 구현 객체 생성

함수적 스타일의 람다식 작성법
  - (타입 매개변수, ...) > {실행문};
  - (int a) > {System.out.println(a); };

람다식의 다양한 표현 방법
  1. (a) > {System.out.println(a); };
    - 매개변수 타입은 런타임 시에 대입되는 값에 따라 자동 인식 될 수 있음
  2. a > {System.out.println(a); };
    - 매개변수가 1개인 경우 괄호 생략 가능
  3. a > System.out.println(a);
    - 실행문이 한 줄인 경우 중괄호 {} 생략 가능
  4. () > {System.out.println("abce"); };
    - 매개변수가 없는 경우 반드시 빈 괄호  () 있어야 함
  5. (x, y) > {return x+y;}
    - 반환값이 있는 경우 return 문 사용
  6. (x, y) > x+y;
    - 중괄호 안에 return문만 있는 경우 return 생략 가능

@FunctionallInterface 어노테이션
  - 함수적 인터페이스 (추상 메서드 1개)임을 표시하는 어노테이션
  - 함수적 인터페이스를 작성할 때 2개 이상의 추상 메서드가 선언되지 않도록 컴파일러가 확인하게 하는 어노테이션
  - 선택사항 (생략 가능)
  - 어노테이션이 없어도 추상 메서드가 1개이면 모두 함수적 인터페이스
