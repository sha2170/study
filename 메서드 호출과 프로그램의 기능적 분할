** 메서드 호출과 프로그램의 기능적 분할 **
  - 코드 재사용성, 가독성 증가
  - 유지 보수 용이
  - 복잡한 문제를 작은 부분으로 나누어 해결하는 데 도움을 줌
  - 각 부분이 독립적으로 기능을 수행하게 함으로써 전체 프로그램 이해와 관리가 쉬움

메서드 호출
  - 메서드는 클래스의 멤버 함수
  - 특정 작업을 수행하는 코드 블록
  - 코드 중복을 줄이고 가독성 향상

프로그램의 기능적 분할
  - 프로그램을 여러 개의 작은 단위로 나눈 것
  - 단위는 특정 기능을 수행하는 메서드로 구현
  - 프로그램의 구조를 명확히 하고, 개발 및 유지보수를 쉽게 함
  - 오류를 찾아 수정하기 편리함
  > 사용자 입력 처리 메서드, 데이터를 처리하는 메서드, 결과를 출력하는 메서드

Call by Value와 Call by Reference
  - Java에서는 기본적으로 "call by value" 방식 사용
  - 객체 참조 전달할 때는 "call by reference" 처럼 보이지만 객체 참조도 값을 전달함 (call by value of the reference)

Call by Value
  - 메서드에 값을 전달할 때, 실제 값을 복사하여 전달
  - 메서드 내에서 값이 변경되어도 원래 값에는 영향을 주지 않음
  - 프리미티브 타입의 전달 시 이 방식 사용
      - 프리미티브 타입의 매개변수는 호출된 메서드에서 값을 변경하더라도 호출한 쪽에 영향을 주지 못함
       > "값에 의한 호출(call by value)"이기 때문

Call by Reference
  - Java에서 진정한 의미의 "call by reference" 지원하지 않지만, 객체 참조를 메서드에 전달할 때 참조의 값(메모리 주소)을 복사하여 전달
  - 메서드 내에서 객체의 상태를 변경하면, 원본 객체에 영향을 줌
  - 객체나 배열을 전달할 때 이와 유사한 행동을 보임
      - 객체나 배열의 값은 호출된 메서드에서 변경하면 호출한 쪽도 변경함

