H2 데이터베이스
  - Java 기반의 경량 인메모리 데이터베이스 테스트 및 개발 환경에서 사용
  - SQL 콘솔을 통해 직접 데이터베이스 조회 및 수정 가능
순수 JDBC
  - 자바에서 기본으로 제공하는 데이터베이스 접근방식
  - java.sql 패키지의 API 사용
  - SQL 직접 작성, 모든 작업을 개발자가 직접 관리 > 코드가 길어지고 복잡해질 수 있음
  - 단순한 데이터베이스 작업에 적합함
스프링 jdbcTemplate
  - 커넥션 관리, 쿼리 실행, 예외 처리 등 반복적인 작업을 간소화
  - SQL은 직접 작성, 코드는 간결
JPA(Java Persistence API)
  - 자바의 ORM(Object-Relational Mapping) 표준 인터페이스 객체와 RDB 간의 매핑을 자동화
  - SQL을 직접 작성하지 않고, 자바 객체를 통해 데이터베이스 작업 수행
  - entity 클래스를 사용해, 데이터베이스 테이블과 객체를 매핑
  - SQL을 작성하지 않고 객체지향적인 방식으로 데이터베이스를 다루고싶을 때 사용
스프링 데이터 JPA
  - 스프링에서 제공하는 JPA 확장 라이브러리
  - JPA를 더 쉽게 사용할 수 있도록 함
  - CRUD 기능을 자동으로 제공하는 리포지토리 인터페이스 사용
  - 리포지토리 인터페이스에 필요한 메서드가 정의
  - 구현 없이 데이터베이스와 상호작용 가능
  - 메서드 이름을 기반으로 쿼리가 자동으로 생성
  - 빠르고 쉽게 데이터베이스 작업을 하고 싶을 때, 특히 CRUD 작업에 매우 유용

ORM(Object-Relational-Mapping)
  - 객체와 DB 테이블 간의 데이터를 자동으로 매핑해주는 기술
  - SQL 작성없이 자바 객체를 데이터베이스 테이블에 쉽게 매핑할 수 있음
  - 장점 
    1. 객체지향 방식으로 DB 작업 -> 코드 가독성, 유지보수성 향상
    2. SQL 작성이 줄어들어 개발 생산성이 높아짐
    3. DB 종속성 줄이고, 코드 재사용성이 높아짐
  - 단점
    1. 복잡한 쿼리는 ORM만으로 해결하기 어려울 수 있음
    2. 학습 곡선이 있어 처음 사용하는 개발자에게 어렵게 느껴질 수 있음
  - 대표적인 ORM 기술: JPA, Hibernate, MyBatis 등

JPA(Java Persistence API)
  - 자바 진영에서 표준으로 정의한 ORM 인터페이스
  - ORM 기술을 사용하는데 필요한 표준 인터페이스만 제공
  - 주요 개념
    - Entity : 데이터베이스 테이블에 매핑되는 자바 객체
    - Persistence Context
    - Entity Manager
    - JPQL(Java Persistence Query Language)
  - 어플리케이션과 DB 사이에 매핑된 객체를 관리, CRUD 작업을 SQL 대신 객체 지향적으로 처리
  - 장점
    1. 객체 중심으로 DB를 다룰 수 있어 코드와 DB간의 일관성 유지
    2. DB 종속성을 줄여 이식성 높일 수 있음
    3. 다양한 벤더에서 구현한 JPA 구현체 사용 가능
  - 단점
    1. 복잡한 쿼리 사용할 경우 JPA만으로 부족 -> Native SQL 사용
    2. 성능 최적화가 필요한 경우 JPA의 추상화가 오히려 복잡하게 작용할 수 있음

Hibernate
  - JPA의 가장 널리 사용되는 구현체 중 하나
  - JPA가 표준화한 API를 구현하면서, JPA에서 제공하지 않는 다양한 기능을 추가로 제공
  - 자체적인 ORM 프레임워크이자, JPA의 구현체 역할을 동시에 수행
  - 주요 기능
    - 캐시 : 성능 최적화, 1차 캐시는 퍼시스턴스
            컨텍스트에서 자동 제공, 2차 캐시는 추가 설정
    - 지연 로딩(Lazy Loading) : 실제 필요한 데이터만 로드
    - 자동 생성 쿼리 : 객체 변경 사항에 따라 자동으로 SQL 쿼리 생성, 실행
    - SQL 확장 기능
  - 장점
    1. 다양한 DB작업 지원
    2. 커뮤니티와 지원이 활발
  - 단점
    1. Hibernate 고유 기능을 많이 사용하게 되면, 다른 JPA 구현체로의 전환이 어려울 수 있음 
    2. 심층적인 학습
