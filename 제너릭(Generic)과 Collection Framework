제너릭 (Generic)
  - 클래스 (인터페이스)나 메서드를 타입 파라미터를 이용하여 선언하는 기법
  - public class 클래스명 <T>{...}
  - public interface 인터페이스명 <T>{...}
  - 클래스 설계 시에 타입 <T> 아직 결정되지 않음 > 총칭해서 제너릭 타입이라고 함
  - 모든 종류의 타입을 다룰 수 있음
  - 선언 시에 클래스 또는 인터페이스 이름 뒤에 '< >' (다이아몬드 연산자) 붙임
  - Gen<String> gen = new Gen<String>();
  - Gen<Integer> gen2 = new Gen<Integer>();
  - 개발 코드에서는 타입 파라미터 자리에 구체적인 타입 지정

타입 파라미터
  - 일반적으로 대문자 알파벳 한 문자로 표현
  - 꼭 T라고 하지 않아도 됨
  - E : Element
  - T : Type
  - V : Value
  - K : Key

주의할 점
  - <>에는 기본 데이터 타입이 올 수 없음
  - <int> X <Integer> O
  - Wrapper 클래스 사용
    - 기본 데이터 타입에 대응되는 클래스
    - 기본 데이터 타입을 객체로 포장

제너릭을 사용하는 코드의 이점
  - 컴파일 시 강한 타입 체크 가능
    - 실행 시 타입 에러가 나는 것을 방지
    - 컴파일 시 미리 타입을 강하게 체크해서 에러를 사전 방지
  - 강제 타입 변환 제거 가능 | 프로그램 성능 향상
    - 제너릭을 사용하지 않을 경우
            List list = new ArrayList();
            list.add("hello");
            String str = (String)list.get(0); // 강제 타입 변환
            Object -> String
    - 제너릭을 사용할 경우
            List<String> list = new ArrayList<String>();
            list.add("hello");
            String str = list.get(0);

제너릭 : 컴파일 시 타입 결정
오버라이드 메서드 : 실행 시 메서드 결정

제너릭 정리 
  - 제너릭은 클래스나 인터페이스를 설계할 때 구체적인 타입을 명시하지 않고 파라미터로 대체했다가 
    실제 클래스가 사용될 때 구체적인 타입을 지정하여 타입변환을 최소화시킴으로써 
    프로그램 성능을 향상시킬 수 있고 컴파일 시에 미리 타입을 강하게 체크해서 에러를 사전에 방지

멀티 타입 파라미터
  - 두 개 이상의 타입 파라미터 사용 가능
  - 각 타입 파라미터는 쉼표로 구분
  - class 클래스명<K, v, ...>{...}


컬렉션
  - 사전적 의미로 요소(객체)를 수집해 저장해놓은 것
프레임워크
  - 표준화, 정형화된 체계적인 프로그래밍 방식
  - 라이브러리(기능) + 프로그래밍 방식
  - 미리 정해진 방식대로 프로그램 작성
  - 누가 작성하든 프로그램이 표준화 > 유지보수하기 쉬움

다수의 객체를 저장하고 필요시 꺼내서 사용하는 경우 가장 간단하게 사용하는 방법 > 배열 사용
배열의 문제점
  - 생성 시 크기 고정
  - 사용 시 크기 변경 불가
    - 불특정 다수의 객체를 저장하기에 문제
  - 객체 삭제했을 때 해당 인덱스가 비게 됨
    - 객체 저장 시에 비어있는지 확인 필요

컬렉션 프레임워크
  - 컬렉션(다수의 객체)을 다루기 위한 표준화된 프로그래밍 방식
  - 많은 양의 데이터를 저장, 삭제, 검색, 비교, 정렬 등의 작업을 편하고 쉽게 수행
  - 인터페이스를 통해서 정형화된 방법으로 다양한 컬렉션 클래스 이용
  - java.util 패키지에 포함

<컬렉션 프레임워크의 주요 인터페이스>
Collection 
  1. List 계열
    - 순서를 유지하고 저장
    - 중복 저장 가능
    - 구현 클래스 : ArrayList, Vector, LinkedList
  2. Set 계열
    - 순서를 유지하지 않고 저장
    - 중복 저장 불가능
    - 구현 클래스 : HashSet, TreeSet
Map 계열
  - 키와 값의 쌍으로 저장
  - 키는 중복 저장 불가능
  - 구현 클래스 : HashMap, HashTable, TreeMap, Properties

List
  - 특징 1. 순서가 있는 데이터의 집합
        2. 데이터의 중복 허용
  - 장점 : 인덱스를 통한 데이터 접근이 용이함
  - 단점 : 큰 데이터 집합에서 요소의 검색 및 정렬 시 성능 저하 발생 가능
  - 사용 시기 : 데이터의 순서가 중요하거나 중복된 데이터를 허용해야할 때 사용

Map
  - 특징 1. 키(Key)와 값(Value)의 쌍으로 데이터를 저장
        2. 키는 중복될 수 없지만 값은 중복 가능(LinkedList)
  - 장점 : 키를 통해 빠르게 데이터 접근 가능
  - 단점 1. 키의 중복 허용 안함
        2. 중복된 데이터를 저장하기 위해서는 추가적인 로직이 필요할 수 있음
  - 사용 시기 1. 데이터의 키와 값 쌍으로 관리해야할 때
            2. 빠른 검색이 필요할 때

Set
  - 특징 1. 중복을 허용하지 않는 데이터의 집합을 다룸
        2. 데이터의 순서 보장하지 않음
  - 장점 1. 데이터 중복 방지
        2. HashSet의 경우 데이터의 추가, 삭제, 검색이 빠름
  - 단점 : TreeSet과 같이 정렬을 지원하는 구현체는 데이터 추가나 삭제에 비용이 더 들 수 있음
  - 사용 시기 : 중복된 데이터를 허용하지 않는 고유한 요소 집합이 필요할 때 사용

Queue
  - 특징 1. FIFO(First In First Out) 구조로 데이터를 처리
        2. PriorityQueue와 같은 구현체는 우선순위에 따라 데이터를 처리
  - 장점 : 데이터를 순차적으로 처리할 때 유용
  - 단점 1. 일부 구현체는 데이터 처리에 복잡도가 증가할 수 있음
        2. 무작위 접근 불가
  - 사용 시기 : 작업을 순차적으로 처리하거나 특정 조건에 따라 데이터를 처리해야할 때 사용

Deque
  - 특징 1. 양방향 큐(Double-Ended Queue) 구조
        2. 데이터를 양쪽 끝에서 추가하거나 제거 가능
        3. FIFO와 LIFO 두 특성을 모두 지원
  - 장점 1. 양쪽 끝에서 데이터 추가 및 제거 가능
        2. 스택과 큐의 기능을 모두 구현 가능
        3. 사용 사레가 매우 다양함
  - 단점 1. ArrayDeque 같은 구현체는 내부적으로 배열을 사용하기 때문에 매우 큰 데이터셋을 다룰 때 메모리
           재할당으로 인한 성능 저하 발생 가능
        2. LinkedList 기반의 덱은 노드 기반 데이터 구조의 오버헤드 가능성 있음
  - 사용 시기 1. 스택이나 큐의 기능이 필요한 경우
            2. 양쪽 끝에서 데이터의 추가와 제거가 자주 발생하는 경우 유용함
              > 너비 우선 탐색(BFS)에서는 큐, 깊이 우선 탐색(DFS)에서는 스택으로 활용

Stack
  - 특징 : LIFO (Last In First Out) 구조의 데이터 집합
  - 장점 1. 후입선출 방식 관리
        2. backtracking에 유용함
  - 단점 : 무작위 접근 불가 | 무조건 최근에 넣은 자료만 제거 가능
  - 사용 시기 1. 깊이 우선 탐색(DFS)
            2. 함수 호출 시 파라미터 및 로컬 변수 저장

컬렉션 프레임워크의 공통 단점 및 주의사항
  1. 동기화(synchronization) 문제
  2. 변경 불가능한 컬렉션(immutability)
  3. 성능 문제
  4. null 요소 처리
  5. 대용량 데이터 처리
  6. 타입 안정성


ArrayList | List 인터페이스의 구현 클래스
  - 크기가 가변적으로 변하는 선형 리스트
  - 배열과 유사 | 순차리스트, 인덱스 사용
  - 배열과 차이점 : 배열 - 크기 고정
                ArrayList - 객체 추가 기능
                저장 용량 초과 시 자동으로 저장 용량 증가

Iterator 인터페이스
  - 요소가 순서대로 저장된 컬렉션에서 요소를 순차적으로 검색할 때 사용
  - Iterator<Integer> it = list.iterator();
    while(it.hasNext()) {
      System.out.println(it.next));
    }

Map
  - 키(Key)와 값(Value)의 쌍으로 이루어진 데이터의 집합
  - 키와 값은 모두 객체
  - 키는 중복될 수 없지만, 값을 중복 저장 가능
    - 중복된 키로 저장할 경우, 이전 값을 덮어 씀
  - 구현 클래스 : HashMap, HashTable, LinkedHashMap, Properties, TreeMap
  - Map<K, V> map = new HashMap<K, V>();

Key타입은 String 많이 사용
  - <String, String>
  - <String, Integer>
  - <String, Object>

HashMap : 저장 순서가 보장되지 않음
LinkedHashMap : 저장 순서 유지됨

