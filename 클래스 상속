상속 (Inheritance) 
  - 한 클래스에서 정의된 멤버 필드와 메서드를 다른 클래스가 물려 받는 것
  - 자식이 부모를 선택해서 물려 받음
  - 상속 대상 : 부모의 필드와 메서드

상속 효과
  - 부모 클래스를 재사용해서 자식 클래스를 빨리 개발 가능
  - 클래스 사이에 멤버 중복 선언 불필요
  - 클래스 간 계층적 분류 및 관리 (효율적)
  - 유지보수 편리성 제공

상속 대상 제한
  - 부모 클래스의 private 접근 갖는 필드와 메서드는 제외
  - protected 접근 제한자로 지정하면 상속 가능

상속하는 클래스 : 수퍼 클래스, 기반 클래스, 부모 클래스
상속 받는 클래스 : 서브 클래스, 파생 클래스, 자식 클래스

형식 
  - extends 키워드 사용
  - class 자식클래스명 extends 부모 클래스명
      - class Parent {} // 부모 클래스
      - class Child extends Parent {} // Parent 클래스를 상속받은 Child 클래스

자바 상속의 특징
  - 다중 상속을 지원하지 않음
  - extends 다음에 오직 한 개의 클래스만 사용
  - 상속 횟수 제한 없음
  - 계층 구조의 최상위에 있는 클래스는 java.long.Object 클래스
  - 모든 클래스는 Object 클래스로부터 상속 받음


클래스 구성
  - 멤버 필드 : 데이터
  - 멤버 메서드 : 기능 (동작)
      - 메서드는 만들어 놓았다고(정의해 놓았다고) 알아서 일을 하지 않음
      - 반드시 호출해야만 일을 수행함

상속에서의 생성자
  - 객체(인스턴스) 초기화 목적
  - 부모 클래스의 생성자 : 부모 클래스 멤버 초기화
  - 자식 클래스의 생성자 : 자식 클래스 멤버 초기화

  - 자식 클래스의 객체(인스턴스)가 생성될 때 : 
      부모 클래스의 멤버를 상속받기 때문에 부모 클래스의 생성자와 자식 클래스의 생성자 모두 실행

  - 실행 순서 1. 부모 클래스의 생성자 먼저 실행
            2. 자식 클래스의 생성자 실행
              - 부모 클래스와 자식 클래스에서 여러 개의 생성자가 있을 수 있는데 
              - 클래스에 아무 생성자도 정의되지 않은 경우 ㅣ 컴파일러에 의해 자동으로 기본 생성자 호출
              - 생성자에 매개변수가 있는 경우 | 짝을 이루는 생성자가 없으면 오류 발생
              - 자식 클래스와 부모 클래스의 생성자를 짝 맞추어 선택하기 위해
                - super() 메서드를 사용해서 명시적인 방법으로 해당하는 생성자 호출
                - super() : 부모 클래스의 생성자 호출 메서드


this vs this()
  - this 레퍼런스 : 클래스 내에서 객체 자신을 가리키는 레퍼런스
  - this() 메서드 : 한 생성자에서 다른 생성자 호출하는 메서드

super vs super()
  - super 레퍼런스 : 부모 클래스(수퍼 클래스)를 가리키는 레퍼런스
  - super() : 부모 클래스의 생성자를 호출하는 메서드


메서드 재정의 (Overriding, 오버라이딩)
  - 부모 클래스에서 상속받은 메서드를 자식 클래스에서 재정의해서 사용하는 것
  - 상속 관계에서만 발생
  - 메서드에만 적용(필드(변수)에서는 적용되지 않음)
  - 부모 클래스의 메서드는 무시되고, 자식 클래스에서 재정의한 메서드만 사용

  - 조건 
    - 부모 클래스에서 선언된 메서드와 이름, 반환형, 매개변수 리스트가 완전 동일해야 함
    - 부모 클래스 메서드의 접근 제한자보다 접근 범위가 좁아서는 안됨
      - public > protected > default > private

  - @Override 어노테이션
    - 컴파일러에게 부모 클래스의 메서드 선언부와 동일한 지 검사를 지시
    - 정확한 메서드 재정의 위해 붙임

  - 효과
    - 부모 메서드는 숨겨지는 효과
    - 재정의된 자식 메서드만 실행

  - 부모 메서드를 사용하기 위해 super.method() 사용


final 개념 | 마지막
  - 상수 ㅣ 마지막 값
    - 값 변경 불가
    - final double PI = 3.14;
  - final 클래스 | 마지막 클래스
    - 상속 불가
    - public final class Member() {}
  - final 메서드 | 마지막 메서드
    - 오버라이딩 불가(재정의해서 사용 못함)
    - public final void stop() {}


타입 변환과 다형성 (Polymorphism)
  - 동일한 타입이지만 실행 결과가 다양한 객체를 이용(대입)할 수 있는 성질
     - 하나의 타입에 여러 객체를 대입해서 다양한 기능 이용 가능
  - 부모 타입에는 모든 자식 객체가 대입 가능
    - 자식 타입은 부모 타입으로 자동 타입 변환
  - 자동 타입 변환 후에는 부모 클래스 멤버만 접근 가능
    - 비록 변수는 자식 객체를 참조하지만 변수로 접근 가능한 멤버는 부모 클래스 멤버로 한정
    - 단 예외의 경우 : 오버라이딩
      - 메서드가 자식 클래스에 오버라이딩 되었다면 자식 클래스의 메서드가 대신 호출됨

+ void : 메서드가 아무런 값을 반환하지 않을 때 사용
  기본 타입/객체 타입(int, double, string) : 메서드가 특정 타입의 값을 반환할 때 사용
  생성자 : 클래스의 이름과 동일하며, 반환 타입을 명시하지 않음. 생성자는 객체 초기화에 사용됨
