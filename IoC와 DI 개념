리팩토링 (Refactoring)
  - 외부 기능에는 변화가 없지만 내부적으로 효율적으로 시스템을 재구성하는 것
  - 관심사에 맞게 프로그램을 효율적으로 구성하고 Spring 원칙에 부합할 수 있게 어플리케이션 구성 가능

관심사와 제어권
1. 관심사 파악  
  - 이메일을 발송하는 함수 예제

public void sendEmail(@RequestParam("to") List<String> to, @RequestParam("cc") List<String> cc){
	String subject = generateSubject(); // 제목 생성
	String body = generateBody(); // 내용 생성
	Content subjectContent = new Content().withData(subject);
	Body bodyContent = new Body().withHtml(new Content().withData(body));
	Message message = new Message().withSubject(subjectContent).withBody(bodyContent);
	Destination destination = new Destination(); //받는 사람 구성
	if(CollectionUtils.isNotEmpty(to)) {
		destination.withToAddresses(to);
	}
	if(CollectionUtils.isNotEmpty(cc)){
		destination.withCcAddress(cc);
	}
	SendEmailRequest sendEmailRequest = new SendEmailRequest().withSource(source).withDestination(destination).withMessage(message);
	EmailServiceClient emailServiceClient = new EmailServiceClient();
	emailServiceClient.sendEmail(sendEmailRequest); // 실제 이메일 발송
}

  - 이메일 메시지 구성 + 이메일 발송

public void sendEmail(SendEmailRequest sendEmailRequest){
    // 구성된 이메일을 외부로부터 전달 받음
    EmailServiceClient emailServiceClient = new EmailServiceClient(); 	
    emailServiceClient.sendEmail(sendEmailRequest); // 실제 이메일 발송 
}


객체의 제어권 | 어떠한 객체가 다른 객체를 생성, 관리하는 권한
public void sendEmail(SendEmailRequest sendEmailRequest){
    // 구성된 이메일을 외부로부터 전달 받음
    EmailServiceClient emailServiceClient = new EmailServiceClient(); 	
    emailServiceClient.sendEmail(sendEmailRequest); // 실제 이메일 발송 
}


제어의 역전 (IoC)
1. 제어권 이전
	- 제어권이라고 하는 관심사 > 관심사도 리팩토링하려면 분리할 필요가 있음
	- EmailController에서 '관계 설정 기능'의 분리 필요
		- EmailController의 sendEmail은 이메일 전송이라는 본연의 기능에만 집중
		- EmailServiceClient 클래스 객체의 선택/생성 불필요
		- EmailServiceClient의 sendEmail 메서드만 남기고, EmailServiceClient의 객체를 생성하는 부분을 어딘가로 분리할 필요가 있음

제어권 역전(IoC | Inversion of Control)
	- Spring이 지향하는 바는 이런 제어권에 해당하는 것은 모두 다른 객체(상위 객체)에게 위임
	1. 임의의 객체는 자신이 사용할 다른 객체를 선택/생성하지 않음
	2. 객체 스스로가 향후 어떻게 만들어지고 어디서 사용될지 알 수 없음
	3. 모든 제어 권한은 다른 객체(상위)에게 위임
		- 내가 제어권을 가질 필요 없이 위에서부터 전달되는 객체를 그대로 수동적으로 사용만 하겠다 > 프로그래머가 아닌 스프링 프레임워크 관리
		- 객체에 대한 제어권이 수동적으로 역전되었다 라는 뜻
	- 장점 1. 프로그램 소스 코드의 유연성 및 확장성 증가
				2. IoC는 스프링에서 제공하는 모든 기능의 기초가 되는 기반 기술

2. Spring의 IoC
	- EmailController가 이미 최상위 클래스인데 EmailServiceClient의 제어권을 상위 객체로 넘기려면 어떻게 해야 할까?
	- EmailController에 대한 제어권은 누가 가지고 있나?

Object Factory
	- Bean : Spring에서 제어권을 가지고 직접 생성, 관리하는 객체
Factory Class
	- Bean Factory를 상속한 org.springframework.context.ApplicationContext 인터페이스를 통해 어플리케이션 전반에 걸쳐 제어 담당
	- Application Context 역할
		- IoC 개념을 적용해서 관리할 모든 객체에 대한 제어권 담당
			- 컨테이너 역할을 하는 것이 Application Context
			- 모든 객체를 생성해서 담고 있게 됨
Application Context 활용 장점
	- 본연의 기능 및 관심사에 집중 가능
	- Bean의 종합적 관리 자동화(객체관리는 스프링이 자체적으로)
Spring에서 관리하는 Bean의 수명
	- Bean은 Spring Container의 컨테이너 내에 한 개의 객체로 생성
	- 이를 Singleton Registry로 관리
	- 생성된 Bean은 강제로 제거하지 않는 한 스프링 컨테이너 내에 계속 유지


의존관계 주입 (의존성 주입 : DI)
1. 의존관계 설정
	- 의존관계 (dependency)
		- A가 B에 의존한다. 는 방향성이 존재 (A->B)
	- 의존관계 주입(의존성 주입 DI | Dependency Injection)
		- 객체 간의 관계 설정 의도 표현
	- 스프링에서 의존관계 주입 조건
		- 런타임 시점의 의존관계는 Application Context같은 제 3의 객체가 결정
2. Annotation을 이용한 DI
	- @Autowired
		- Spring Framework에서 지원
		- Spring이 자동으로 빈(Bean) 찾아서 주입해줌
		- Spring Framework에 종속적 (단점)
		- 사용 위치
			- 필드 : 클래스의 멤버 변수에 직접 붙일 수 있음
			- 생성자 : 클래스의 생성자에 @Autowired를 붙여 생성자가 호출될 때 의존성을 자동 주입
			- 세터 메서드
		- 주입하려는 Bean의 타입을 필수로 설정하지 않으려면 @Autowired(required=false)
	- @Inject
		- Java 표준으로 만들어진 어노테이션
		- 특정 프레임워크에 종속되지 않음

순환 의존성 (circular dependency)
	- 서로서로 의존하는 관계의 Bean을 생성 순환 의존성이 발생
	- Bean 구성할 때 순환 의존성을 피해야 함


AOP(Aspect Oriented Programming) 개념
	- 관점 지향 프로그래밍
	- 어플리케이션의 핵심적인 기능에서 부가적인 기능을 분리하여 별도 모듈로 구분하여 설계하고 개발하는 방법
	- 어플리케이션을 다양한 측면에서 독립적으로 모델링, 설계, 개발할 수 있도록 함

Aspect
	- 객체지향 기술에서 부가기능 모듈을 부르는 이름
	- Aspect 자체로는 어플리케이션의 핵심기능을 담고 있지는 않지만 요소요소마다 공통 관심사항이 될 수는 있음
	- 어플리케이션을 구성하는 보조적인 한 가지 측면

AOP 주요 용어
	- Target
	- Advice | 타겟에 제공할 부가기능을 담은 모듈
	- Join Point | 어드바이스가 적용될 수 있는 위치
	- PointCut | 스프링의 포인트컷은 특정 타입 객체의 특정 메서드를 선정하는 기능

AspectJ 활용
	- @AspectJ
	- dependency
		- spring-aop
		- aspectjrt
		- aspectjweaver

		
	


