React 엘리먼트 렌더링
  - 엘리먼트(Element) : React 앱의 가장 작은 단위로, 화면에 표시할 내용을 정의함
                      React 엘리먼트는 불변 객체로, 브라우저의 DOM 엘리먼트와 다르며 생성된 후 변경할 수 없음
                      엘리먼트는 React DOM에 의해 관리되며, 실제 DOM에 업데이트가 필요할 때만 적용됨
  - 엘리먼트 생성 ㅣ 엘리먼트는 JavaScript 객체로, UI의 모습을 기술함
                  React에서는 JSX 문법을 사용하여 엘리먼트를 쉽게 생성할 수 있음
    const element = <h1>Hello, world!</h1>;
  - 엘리먼트 렌더링 | React 엘리먼트를 DOM에 렌더링하려면 ReactDOM.createRoot()와 root.render()를 사용함
  - 엘리먼트 업데이트 | React 엘리먼트는 불변 객체이기 때문에, UI를 업데이트하려면 새로운 엘리먼트를 생성하고 root.render()를 다시 호출해야 함

React 컴포넌트(Component)
  - 컴포넌트 : 재사용 가능한 UI 구성 요소로, 하나의 함수 또는 클래스로 정의됨
             각 컴포넌트는 엘리먼트를 반환하여 화면에 그려지며, 필요한 경우 props를 통해 데이터를 전달받음
  - 함수형 컴포넌트 | React에서 가장 일반적인 컴포넌트 형태
                  간단한 함수로, 입력값(props)을 받아 JSX를 반환하여 UI를 그림
    function Welcome(props) {
      return <h1>Hello, {props.name}</h1>;
      }
  - 클래스형 컴포넌트 | ES6 클래스 문법을 사용하여 정의됨
                    React.Component를 확장하여 정의되며, React의 생명주기 메서드와 상태 관리를 사용할 수 있음
                    최근에는 주로 함수형 컴포넌트와 훅(Hooks)을 사용하는 것이 권장됨
                    render() 메서드를 통해 JSX를 반환함
    import React from 'react';

    class Welcome extends React.Component {
      render() {
        return <h1>Hello, {this.props.name}</h1>;
        }
      }
  - 컴포넌트 렌더링 | 컴포넌트는 JSX 내에서 태그처럼 사용되며, React는 이를 호출하여 엘리먼트를 렌더링함
    const element = <Welcome name="Sara" />;
    root.render(element);
  - 컴포넌트 합성과 추출 | 컴포넌트는 다른 컴포넌트를 포함하거나 출력에 사용할 수 있음 -> 더 큰 앱을 구조적으로 잘 유지하는 데 유용함

Props(Properties)
  - 컴포넌트가 외부에서 전달받는 데이터
  - 읽기 전용이며 부모 컴포넌트가 자식 컴포넌트로 데이터를 전달할 때 사용됨
  - Props는 부모 컴포넌트에서 정의되며, 자식 컴포넌트에서는 이를 직접 수정할 수 없음
  function Welcome(props) {
    return <h1>Hello, {props.name}</h1>;
  }
  function App() {
    return <Welcome name="Alice" />;
  }
  - 특징 
      1. 읽기 전용 : Props는 컴포넌트 내부에서 변경할 수 없는 읽기 전용 데이터임 
                   이를 통해 부모 컴포넌트는 자식 컴포넌트에 데이터를 전달하지만, 자식은 이를 수정할 수 없음
      2. 컴포넌트 간 데이터 전달 : Props는 부모 컴포넌트가 자식 컴포넌트에 데이터를 전달하는 주요 방법임

React 상태(State)
  - State는 컴포넌트 내부에서 동적으로 변할 수 있는 데이터
    컴포넌트는 상태가 변경되면 다시 렌더링되어 UI가 업데이트됨
    Props는 외부에서 주어지는 값이라면, State는 컴포넌트 내부에서 관리되는 값
    State는 변경될 수 있으며, 상태가 변경되면 React는 해당 컴포넌트를 다시 렌더링함
  - 함수형 컴포넌트에서의 상태 관리(useState) | 상태 값과 상태를 변경하는 함수를 반환함
      - useState(0) : 초기 상태 값을 0으로 설정함
      - count : 현재 상태 값
      - setCount : 상태 값을 업데이트하는 함수, 이를 호출하면 React가 상태를 업데이트하고 UI를 다시 렌더링함
  - 클래스형 컴포넌트에서의 상태 관리(this.state)
    - 상태를 변경하려면 this.setState() 메서드 사용
  - 생명주기 메서드 | 클래스형 컴포넌트에서는 생명주기 메서드를 사용해 컴포넌트가 DOM에 추가되거나 제거될 때의 동작을 제어할 수 있음

Props vs State
  - Props : 부모 컴포넌트에서 자식 컴포넌트로 전달되는 값으로 읽기 전용
  - State : 컴포넌트 자체에서 관리하는 값으로, 동적으로 변할 수 있으며 컴포넌트의 렌더링을 트릐거함
    

