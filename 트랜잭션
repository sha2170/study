트랜잭션 | 데이터베이스 작업의 ACID 속성을 보장하는 매커니즘
  - ACID 속성
    - Atomicity(원자성)
    - Consistency(일관성)
    - Isolation(고립성)
    - Durability(지속성)

Spring에서 트랜잭션 관리
  - 선언적 관리방식
  - 프로그래밍적 관리방식
- 선언적 트랜잭션 관리가 더 간결하고, 코드에서 분리된 형태로 관리할 수 있기 때문에 더 많이 사용함
1. 선언적 트랜잭션 관리
  - @Transactional 어노테이션 사용
    - 스프링이 자동으로 트랜잭션의 시작과 종료(커밋 또는 롤백)를 관리
    - 클래스에 적용 : 해당 클래스의 모든 메서드가 트랜잭션 내에서 실행
    - 메서드에 정의 : 해당 메서드가 트랜잭션 내에서 실행
2. 프로그래밍적 트랜잭션 관리
  - Transaction Template을 사용하거나 Platform TransactionManager를 통해 트랜잭션을 수동으로 관리하는 방식
  - 트랜잭션의 세밀한 제어가 필요할 때 사용
  - 프로그래밍적 트랜잭션 관리 방식에서는 트랜잭션을 시작하고 커밋 또는 롤백을 수동으로 처리

- 트랜잭션 전파(propagation) | 트랜잭션이 다른 메서드나 서비스에서 호출될 때, 트랜잭션이 어떻게 처리될지 정의
  - Spring은 여러 전파 옵션 제공
    1. REQUIRED (기본값)
    2. REQUIRED_NEW
    3. MANDATORY : 기존 트랜잭션이 없으면 예외 발생
    4. SUPPORTS : 있으면 사용, 없으면 없이 실행
    5. NOT_SUPPORTS
    6. NEVER : 트랜잭션이 있으면 예외 발생

- 트랜잭션 격리 수준(Isolation Level) | 여러 트랜잭션이 동시에 실행될 때 데이터의 일관성을 유지하는 방법 정의
  - DEFAULT : 데이터베이스의 기본 격리 수준을 따름
  - READ_UNCOMMITED : 가장 낮은 격리 수준
  - READ_COMMITED
  - REPEATABLE_READ : 트랜잭션이 시작될 때 조회한 데이터가 트랜잭션이 끝날 때까지 변경되지 않음을 보장
  - SERIALIZABLE : 가장 높은 격리 수준, 모든 트랜잭션을 순차적으로 처리하여 데이터 일관성을 보장

- 트랜잭션 롤백 규칙
  - 스프링의 트랜잭션은 기본적으로 언체크
  - 예외(RuntimeException)나 에러가 발생하면 롤백됨
  - 체크 예외는 기본적으로 롤백되지 않지만, rollbackFor 속성을 사용하여 롤백할 수 있음

- 트랜잭션 시간 제한 및 읽기 전용 설정 가능
  - 시간을 초과하면 강제로 트랜잭션 롤백하도록 설정
  - 읽기 전용 트랜잭션 설정하면, 트랜잭션 내에서 데이터 수정 작업이 일어나지 않도록 설정 가능
