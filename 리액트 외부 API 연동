비동기 작업
  - 서버쪽 데이터가 필요할 때 Ajax기법을 사용하여 서버 API를 호출해서 데이터를 수신함
  - 이 과정에서 해당 작업을 비동기적으로 처리하게 됨
  - 만약 작업을 동기적으로 처리한다면 요청이 끝날 때까지 기다리는 동안 중지상태가 되기 때문에 다른 작업을 할 수 없음
  - 비동기적으로 처리함으로써 웹 어플리케이션이 멈추지 않기 때문에 동시에 여러 가지 요청을 처리할 수 있고, 기다리는 과정에서 다른 함수를 호출할 수 있음

비동기 작업 예 : setTimeout 함수 사용해 특정 작업을 예약할 때
비동기 작업을 할 때 가장 흔히 사용하는 방법 : 콜백함수를 허용하는 것
콜백 함수 : 어떤 함수가 비동기 작업을 완료한 후에 실행될 함수

Promise
  - 비동기 작업을 처리할 때 콜백함수 대신 사용할 수 있는 방법
  - 콜백지옥 같은 코드가 형성되지 않게 하는 방안
  - 주어진 작업이 성공했을 때(resolve), 실패했을 때(reject) 그 결과를 반환
* 콜백 함수는 제어 흐름을 계속 전달하는 역할, Promise는 비동기 작업의 성공/실패 결과를 처리하는 구조라는 차이가 있음

async / await
  - Promise를 더욱 쉽게 사용할 수 있도록 해주는 ES2017(ES8) 문법
  - 이 문법을 사용하려면 함수 앞 부분에 async 키워드를 추가하고 해당 함수 내부에서 Promise의 앞 부분에 await 키워드를 사용
  - 이렇게 하면 Promise가 끝날 때까지 기다리고, 결과 값을 특정 변수에 담을 수 있음
