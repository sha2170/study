Map
  - 키(key)와 값(value) 쌍으로 데이터를 저장하는 자료구조
  - 각 키와 값의 조합을 "엔트리"라고 하며, 각 키는 고유해야 함(중복된 키를 허용하지 않음)
  - 여러 키가 같은 값을 가질 수는 있음
  - Map 인터페이스는 Java 컬렉션 프레임워크의 일부

주요 특징
  - 키를 통해 빠르게 값에 접근할 수 있음
  - 키는 중복될 수 없으며, 각 키는 하나의 값만 매핑할 수 있음
  - 값은 중복될 수 있음 | 다른 키들이 같은 값을 가질 수 있음
  - 순서를 보장하지 않는 Map 구현체도 있고(예:HashMap), 키의 순서를 유지하는 구현체도 있음(예:LinkedHashMap)

주요 구현체
  - HashMap : 가장 일반적인 Map 구현체로, 해시 테이블을 사용하여 키와 값의 쌍을 저장함
              순서를 보장하지 않으며, null 키와 null 값을 허용함
  - TreeMap : 레드-블랙 트리 구조를 사용하여 키가 정렬된 상태로 저장됨
              Comparator 또는 Comparable을 구현한 키를 요구함
  - LinkedHashMap : HashMap의 순서 유지 버전으로, 삽입 순서 또는 접근 순서에 따라 키-값 쌍을 유지함
  - HashTable : HashMap과 유사하지만 동기화됨
                멀티스레드 환경에서 사용할 수 있으나, ConcurrentHashMap이 더 선호됨
  - ConcurrentHashMap : 동시성 친화적인 HashMap의 변형으로, 멀티스레드 환경에서 성능이 우수함

주요 메서드
  - put(K key, V value) : 키와 값을 Map에 추가함
  - get(Object key) : 주어진 키에 매핑된 값을 반환함
  - getOrDefault(Object key, V defaultValue) : 주어진 키에 매핑된 값이 없으면 디폴트값(2번째 인자) 반환
  - remove(Object key) : 주어진 키에 해당하는 매핑을 제거함
  - containsKey(Object key) : Map이 지정된 키를 포함하는지 여부를 반환함
  - keySet() : Map의 모든 키를 Set 형태로 반환함
  - values() : Map의 모든 값을 컬렉션 형태로 반환함
  - entrySet() : Map의 모든 엔트리를 Set 형태로 반환함
  - size() : 요소의 개수 리턴

사용 시기
  - 키를 통한 빠른 데이터 검색이 필요할 때
  - 데이터를 키-값 쌍으로 관리해야할 때
  - 데이터의 삽입 순서를 유지해야 하거나, 키에 따라 정렬된 상태로 관리해야할 때

Map은 데이터를 효율적으로 검색하고 관리할 수 있는 강력한 도구로, 다양한 애플리케이션과 알고리즘에서 광범위하게 사용됨
                
