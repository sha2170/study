Set
  - 중복되지 않는 요소를 저장(중복 허용 X)하는데 사용되는 컬렉션
  - Collection 인터페이스를 extends
  - 중복된 요소는 추가되지 않음(무시)

주요 구현체
  1. HashSet
    - 가장 일반적으로 사용되는 set 구현체
    - 내부적으로는 HashMap 사용해서 요소를 저장
    - 요소의 순서를 보장하지 않음
    - null 요소도 저장 가능
    - Hash 테이블 기반으로 구현, 조회/추가/삭제 작업에 빠른 성능
  2. LinkedHashSet
    - HashSet의 순서 유지 버전
    - 요소가 추가된 순서대로 요소를 반복(iterat)할 수 있음
    - 내부적으로 LinkedHashMap을 사용함
  3. TreeSet
    - Red-Black 트리 구조를 사용해서 요소를 저장
    - 저장된 모든 요소를 자연 순서대로 정렬함
    - 사용자가 정의한 comparator를 사용해서 정렬 순서를 커스터마이징할 수 있음

주요 메서드
  - add(E e) : 지정된 요소를 Set에 추가
  - remove(Object o) : 지정된 요소를 Set에서 제거
  - contains(Object o) : Set이 지정된 요소를 포함하고 있는지 여부를 반환
  - size() : 요소의 개수를 반환
  - isEmpty() : 비어있는지 여부를 반환
  - clear() : 모든 요소 제거
  - iterator() : 요소에 대한 반복자(iterator)를 반환

사용 사례 및 장점
  - 데이터의 중복 방지 : 중복을 허용하지 않는 요소의 컬렉션을 관리할 때 사용
  - 고유 요소의 집합 : 사용자가 입력한 데이터에서 고유값만 추출해야할 때 유용
  - 데이터 조회 : HashSet은 데이터의 존재 여부를 빠르게 확인할 수 있음

단점
  - 순서 보장
    - HashSet은 요소의 순서를 보장하지 않음
    - 순서를 유지해야한다면 LinkedHashSet을 사용해야 함
  - 값에 대한 접근
    - Set 인터페이스는 인덱스로 요소에 접근하는 메서드를 제공하지 않음
    - 요소에 접근하려면 반복자나 향상된 for문을 사용해야 함

코딩 테스트에서 Set(HashSet)을 사용하는 경우
  - 중복 제거
  - 존재 여부 확인
  - 집합 연산 : 다른 컬렉션과의 합집합/교집합/차집합

대표적으로 Set을 써야하는 유형
  - 유일한 요소 찾기
  - 공통 요소 탐색
  - 데이터 집합 간의 관계 분석

특히 HashSet
  - 높은 성능 요구 : 요소 추가/삭제/조회 등의 작업을 O(1) 평균 시간 복잡도로 처리
  - 큰 데이터 처리
