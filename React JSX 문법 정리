1. JSX 기본 문법
  - JSX는 HTML과 유사한 구조로 작성되지만, JavaScript 코드로 컴파일됨

2. JSX 안에서 JavaScript 사용하기
  - JSX 내부에서 JavaScript 표현식을 사용하려면 중괄호 {}를 사용함
  - 변수, 함수 호출, 계산 등을 포함할 수 있음

3. JSX는 표현식이다
  - JSX는 JavaSCript의 표현식
  - 변수에 할당할 수 있고, 함수의 반환 값으로 사용할 수 있으며, if 또는 for 구문 내에서 사용 가능

4. 여러 요소를 반환할 때
  - JSX에서는 하나의 부모 요소로 모든 자식 요소를 감싸야 함
  - 여러 요소를 반환할 때는 반드시 하나의 최상위 요소가 있어야 함

5. JSX에서의 속성 설정
  - HTML 속성과 유사하게 속성 설정 가능
  - class는 className으로, HTML 속성명은 JavaScript 규칙에 따라 camelCase로 작성함

6. JSX로 함수 및 이벤트 처리
  - JSX에서 이벤트 핸들러를 정의하여 사용자 상호작용을 처리할 수 있음
  - 이벤트 핸들러는 중괄호 {}를 사용하여 함수로 전달됨

7. 조건부 렌더링
  - JSX는 삼항 연산자 또는 논리 연산자를 사용하여 조건부로 UI를 렌더링할 수 있음

8. JSX 안에서 반복문 사용
  - JavaScript의 배열 메서드인 map()을 사용하여 여러 요소를 렌더링할 수 있음

* key 속성은 React가 각 요소를 고유하게 식별할 수 있도록 하는 중요한 요소

9. JSX 주석 작성
  - JSX 내에서 주석을 작성하려면 {/* ... */} 형식을 사용함

10. JSX의 보안
  - React는 JSX에서 삽입된 모든 값을 렌더링하기 전에 이스케이프(escaping) 처리함
  - XSS(Cross-Site-Scripting) 공격으로부터 안전하게 보호함

11. JSX는 React 엘리먼트를 표현하는 객체
  - JSX는 최종적으로 React.createElement() 함수로 변환되어 React 엘리먼트 객체를 생성함
  - 이 객체는 React가 DOM을 구성하고 최신 상태로 유지하는 데 사용됨
  - 이렇게 만들어진 React 엘리먼트는 JavaScript 객체로 취급되며, 화면에 표시될 DOM 요소로 변환됨
  - JSX 덕분에 UI 코드를 보다 직관적으로 작성할 수 있으며, React는 이 코드를 이용해 효율적인 DOM 업데이트를 수행함
