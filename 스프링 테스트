테스트는 일반적으로 단위 테스트(Unit Test)와 통합 테스트(Integration Test)로 나눌 수 있음

JUnit
  - 자바에서 가장 널리 사용되는 테스트 프레임워크
  - 스프링 테스트와도 긴밀하게 통합
  - 스프링 어플리케이션의 각 부분을 독립적으로 테스트 가능
  - @Test 어노테이션
      - JUnit에서 제공하는 어노테이션
      - 테스트 메서드 정의
      - @Test 어노테이션이 붙은 메서드를 실행하여 특정 로직이 기대한 대로 동학하는지 검증

@DataJpaTest
  - JPA 테스트를 위한 최적화된 어노테이션
  - 스프링 부트에서 JPA 관련 테스트를 편리하게 작성
  - JPA 리포지토리 관련 컴포넌트만 로드해서 JPA 계층에 대한 테스트 속도를 높임
  - 특징
    1. JPA 관련 컴포넌트만 로드하고, 다른 빈(bean)은 로드하지 않음
    2. 기본적으로 내장된 H2 데이터베이스를 사용해서 테스트가 이루어짐(테스트 독립성 유지)
    3. 자동으로 트랜잭션을 롤백 | 테스트 데이터는 실제 데이터베이스에 영향을 주지 않음
  - 주요 속성
    1. transactional
    2. rollback
    3. EntityManager 지원
  - 주의 사항
    1. JPA 계층만 테스트할 때 사용됨
      - 다른 계층(예:서비스 계층)과의 통합 테스트를 원한다면 @SpringBootTest를 사용하는 것이 적절함
    2. 실제 환경과는 다를 수도 있음(H2 사용)

테스트 데이터 관리
  - @sql 어노테이션
    - 테스트 실행 전에 특정 SQL 파일을 실행해서 필요한 데이터 설정 가능
    - 테이블 초기화, 데이터 삽입 등의 작업을 수행
    - @sql 어노테이션에 설정한 sql파일을 로드해서 테스트 전에 작업 가능

스프링 테스트 장점
  - 독립성
  - 빠른 테스트 : 필요한 부분만 로드하고 전체 어플리케이션을 로드하지 않음
  - 자동 트랜잭션 롤백 : 각 테스트 완료 시 트랜잭션 롤백, 다음 테스트에 영향을 주지 않음

TDD(Test-Driven-Development)
  - 테스트 주도 개발
  - 코드 작성 전에 테스트를 먼저 작성하고, 그 테스트를 통과하도록 코드를 개발하는 방식
  - 결함을 조기에 발견

TDD의 세 가지 단계
1. RED (실패하는 테스트 작성)
  - 테스트를 먼저 작성하고 그 테스트에는 아직 코드가 없기 때문에 당연히 실패
2. GREEN (테스트 통과하기 위한 최소한의 코드 작성)
  - 테스트가 통과할 수 있도록 테스트의 오류들을 하나씩 해결해나가는 필요한 최소한의 코드를 작성
3. REFACTOR
  - 테스트 통과했으면, 코드를 개선하고 중복을 제거하는 등 리팩토링을 진행
4. 기능 추가
  - 다른 기능 추가
  - 다시 테스트 - 코드 작성 - 리팩토링 과정 반복
