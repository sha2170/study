** 배열 **
  - 동일한 타입의 데이터를 연속적으로 저장하는 데이터 구조
  - 배열의 변수는 참조형 변수(래퍼런스 타입)
  - 인덱스와 값을 일대일 대응해 관리하는 자료구조
  - 어떤 위치에 있는 데이터든 한 번에 접근 가능
  - 배열의 크기는 생성 시에 결정, 이후 변경 불가능
  - 순차적 접근 / 임의 접근 모두 가능

배열 선언 : 타입[] 변수명;
  	    int[] numbers; | 정수형 배열 선언

정적 초기화
  	- 배열을 생성하면서 동시에 초기값을 지정
   	- int[] numbers = {2, 4, 6, 8, 10}; | 선언과 동시에 초기화
동적 초기화
  	- 배열을 생성할 때 크기만 지정, 이후에 각 요소에 값을 할당
   	- String[] names = new String[5]; | 선언과 동시에 초기화
     	- String[] names; | 선언
          names = new String[5]; | 초기화

배열의 길이
   	- .length 속성을 통해 배열의 길이(요소의 길이)를 알 수 있음
    	- numbers.length

배열 요소에 접근 및 수정
	- 접근 : 인덱스 사용해서 배열의 특정 요소에 접근
 		인덱스는 0부터 시작 | numbers[0]
   	- 수정 : 특정 인덱스 요소에 새로운 값을 할당해서 배열의 요소를 수정
    		numbers[0] = 1;

배열의 요소 순회
	- for 반복문 : for 반복문을 사용해서 배열의 모든 요소 순회
 		      for(int i=0; i<numbers.length; i++)
	 		{ numbers[i] = i; }
    	- 향상된 for문 (for-each문)
 		      for(int num:numbers)
	 		{ num }
2차원 배열
	- 행과 열을 가진 테이블 형태의 데이터 구조
 	- 배열의 배열로 구현
  	- 매트릭스, 테이블 데이터, 그리드와 같은 복잡한 데이터 구조를 효율적으로 표현 가능
   	- 인덱스 접근 | [행 인덱스][열 인덱스]
    		int[][] arr = {{1,2,3},{4,5,6}}; | 2행 3열의 2차원 배열

** java.util.arrays 클래스 **
	- 배열을 다루기 위한 다양한 메서드들이 존재
 	- sort(array) : 배열 요소를 오름차순으로 정렬
  	- binarySearch(array,key) : 정렬된 배열에서 지정된 값의 인덱스를 이진검색 알고리즘을 사용해 찾음
   	- CopyOf(originalArray, newLength) : 지정된 길이만큼 새로운 배열로 복사
    	- equals(arr1,arr2) : 같은지 비교
     	- fill(arr, value) : 배열의 모든 요소를 특정 값으로 채움
      	- toString(arr) : 배열의 요소를 문자열 형태로 반환하여 출력하기 쉽게 함
       	- deepToString(arr) : 다차원 배열의 요소를 문자열 형태로 반환하여 출력하기 쉽게 함
	- deepEquals(arr1,arr2) : 다차원 배열의 내용이 같은지 깊은 비교
