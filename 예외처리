오류 종류
  - 에러(Error) 
    - 컴파일 에러
    - 런타임 에러(실행시간 에러)
  - 예외(Exception)

에러(Error)
  - 하드웨어의 잘못된 동작 또는 고장 등으로 인한 오류
  - 에러가 발생되면 프로그램 종료
  - 정상 실행 상태로 돌아갈 수 없음
  - 컴파일 에러
    - 문법에 맞지 않을 경우 발생
    - 컴파일 시 처리 가능
  - 런타임 에러
    - 실행시간 오류
      - 프로그램 실행 중에 발생하는 오류
      - 프로그램 강제 종료
      - 잘못된 메모리 접근 오류, 논리 오류, 사용자의 잘못된 입력 등

예외(Exception)
  - 사용자의 잘못된 조작 또는 개발자의 잘못된 코딩으로 인한 오류
  - 예외가 발생되면 프로그램 종료되지만 예외처리를 통해 정상 실행 상태로 돌아갈 수 있는 오류
  - 오류 중에서 미리 대처할 수 있는 오류

예외 종류
  - 일반 예외 : 컴파일 체크
    - 예외 처리 코드 없으면 컴파일 오류 발생
  - 실행 예외(RuntimeException)
    - 예외 처리 코드를 생략하더라도 컴파일이 되는 예외
    - 예외 처리 코드 작성 필요

1. try ~ catch ~ finally

package JavaEx02;

public class MultiTryCatch {

	public static void main(String[] args) {
		int[] arr = {1, 2, 3}; // 길이가 3인 정수형 배열을 선언하고 초기화
		
		try {

			//System.out.println(arr[5]); 
			// 이 코드는 arr[5]를 출력하려고 하지만 배열의 범위를 벗어나 예외가 발생
			// ArrayIndexOutBoundsException이 처리

			System.out.println(Integer.parseInt("a100"));

			// 이 코드는 문자열 'a100'을 정수로 변환하려고 시도
			// 'a100'은 숫자가 아니므로 NumberFormatException이 발생

		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println("배열의 인덱스 범위를 벗어났습니다.");

			// ArrayIndexOutofBoundsException을 처리하기 위한 블록
			// 만약 배열의 인덱스를 잘못 참조하여 범위를 벗어나면 이 블록이 실행됨

		} catch (NumberFormatException e) {
			System.out.println("숫자로 변환할 수 없습니다.");

			// NumberFormatException을 처리하기 위한 블록
			// 만약 문자열을 숫자로 변환하는 과정에서 문제가 발생하면 이 블록이 실행됨

		} finally {

			// 예외 발생 여부와 상관없이 무조건 실행됨
			// 이 블록은 주로 파일 닫기, 데이터베이스 연결 종료 등과 같이 예외 발생 여부와
			// 관계없이 꼭 실행되어야 하는 코드를 작성할 때 사용함

			System.out.println("다시 실행하세요.");
		}

	}

}

2. throws

package JavaEx02;

public class ThrowsEx {
	public static void main(String[] args) {
		
// throws가 붙어있는 메서드는 반드시 try 블록 내에서 호출되어야 하고
// catch 블록에서 예외를 처리해야 함
		
// throws 키워드를 사용해 예외를 호출한 메서드로 전달하고, 
// 이를 try ~ catch 블록으로 처리함

		try {
			findClass(); // findClass라는 메서드를 호출
		} catch (ClassNotFoundException e) {
			System.out.println("클래스가 존재하지 않습니다.");
			
// findClass 메서드는 ClassNotFoundException이라는 예외를 던질 수 있기 떄문에
// try ~ catch 블록 안에서 호출해야함
// ClassNotFoundException 예외가 발생했을 때 실행됨

		}
	}
	public static void findClass() throws ClassNotFoundException{
		Class clazz = Class.forName("java.long.String2");

// Class.forName 메서드를 사용해 클래스 이름을 기반으로 클래스를 로드하려고 시도함
// Class.forName은 문자열로 주어진 클래스 이름을 기반으로 해당 클래스를 찾고, 로드하려고 함
// 하지만 주어진 클래스 이름이 잘못되었거나 해당 클래스가 존재하지 않으면 ClassNotFoundException 예외가 발생
		
// findClass 메서드는 이 예외를 처리하지 않고, throws ClassNotFoundException으로 예외를 호출한 메서드로 미룸
// ClassNotFoundException 발생 > java.long.String2라는 클래스가 존재하지 않기 때문

	}
	
}

// throws 키워드는 예외를 메서드 내부에서 처리하지 않고, 호출한 메서드로 예외를 전달할 때 사용됨
// findClass 메서드는 예외를 직접 처리하지 않고, 호출한 main 메서드로 예외를 던져 main에서 처리하도록 함


3. 사용자 정의 예외 발생 (throw)
