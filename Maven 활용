Maven 개념
  - Apache 프로젝트 중 하나
  - 소스코드로부터 배포 가능한 산출물 (Artifact)을 빌드 (Build)하는 빌드툴 (Build Tool)
  - 편리한 '프로젝트 관리 툴'

Maven이 없다면
  - 라이브러리를 직접 다운받아서 프로젝트 경로에 복사해야 함
  - Java의 경우 Classpath에 라이브러리를 지정해야 함
  - 다운받은 라이브러리가 프로젝트 팀원에게도 전달되어야 함

Maven 활용 패턴
  - Build
  - Package : 배포 가능한 jar, war 파일 등을 생성
  - Test
  - Report (html 파일)
  - Release : 배포 
* Build ~ Release 모두 활용 가능

의존성 관리
1. 라이브러리 다운로드 자동화
  - 더 이상 필요한 (의존성 있는) 라이브러리를 하나씩 다운로드 받을 필요가 없음
  - 필요하다고 선언만 하면 Maven이 자동으로 다운로드해줌
2. Maven은 선언적이다?
  - Maven은 명령식(명령어를 입력)이 아님
  - 사용되는 jar 파일들을 어디서 다운로드 받고, 어느 릴리즈(버전)인지 명시하며, 코딩을 하지 않아도 Maven이 알아서 관리함
  - 재다운로드, 최신 버전 설치까지 관리해줌

* 기존 방식 : 사용자가 외부 라이브러리를 위한 lib 폴더를 직접 생성
            사용자가 라이브러리 다운로드 후 Classpath 지정
* Maven 방식 : 선언만 하면 자동으로 생성


POM (Project Object Model) : pom.xml
  - 프로젝트 자체와 의존성에 대한 설정 및 정보 포함
  - Maven은 pom.xml을 읽어 프로젝트를 가공하는 방법을 이해
  - 각각의 프로젝트는 pom.xml 파일을 하나씩 가짐

Maven의 자원 식별 형식
  - 그룹 식별자 (Group ID) : com.example
  - 산출물 식별자 (Artifact ID) : projectname
  - 버전 : 001

pom.xml의 구조
  - <name> | 어플리케이션의 명칭
  - <packaging> | 프로젝트 산출물 (Artifact) 패키징 유형
                  POM, jar, WAR, EAR, EJB, bundle ... 중에서 선택
  - <parent> | 프로젝트의 계층 정보
  - <dependencies> | 의존성 정의 및 설정 영역
  - <dependency> | 하나의 의존성 정의
  - <groupId> | 일반적으로 프로젝트의 패키지 명칭
  - <artifactId> | 산출물의 명칭(Artifact's name), groupId 범위 내에서 유일해야 함
  - <version> | 산출물(Artifact)의 현재 버전

Plugin
  - maven이 프로젝트를 빌드하고 리포팅하고 테스트하는데 각각의 플러그인이 동작을 하게 됨
  - maven이 플러그인 실행 프레임워크
  - maven이 하는 모든 작업들은 각각의 플러그인이 수행
  - 플러그인은 다른 산출물과 같이 저장소에서 관ㄹ
  - 목적(Goal) : 특정 작업, 최소한의 실행 단위
          하나의 플러그인에서 여러 작업을 수행할 수 있도록 지원
          플러그인에서 실행할 수 있는 각각의 기능을 Goal이라고 함
  - goal은 플러그인과 goal명칭의 조합으로 실행 가능
    - 형식 : <plugin>:<goal>
    - 예 : mvn archetype:generate
  - maven은 여러 goal을 묶어 '라이프 사이클 단계(Lifecycle Phases)"로 만들고 실행
    - 형식 : mvn <phase name>
    - 예 : mvn install
  - Plugin 선언 예시 (pom.xml)
    <plugins></plugins> 태그 사이에 하나의 플러그인 정보들을 <plugin></plugin> 태그를 사용해 넣어주면 해당 플러그인 이용 가능

LifeCycle
  - 일반적으로 소프트웨어 프로젝트는 컴파일, 테스트, 패키징, 인스톨과 같은 비슷한 전형적인 단계들을 가짐
  - 이러한 단계는 Goal들로 구성됨
    * Goal은 특정 작업, 최소한의 실행 단위(Task)
  - Maven에서는 이러한 단계를 Build Life Cycle)이라고 부름
    - 빌드 단계(Build Phases)들은 사전 정의된 순서대로 실행
    - 모든 빌드 단계는 이전 단계가 성공적으로 실행되었을 때 실행
  - Phase | 단계(Phase)는 논리적인 개념
    - 실질적인 작업을 수행하는 것은 각각의 단계에 연결 Associate)된 플러그인 Goal
    - 패키지 타입(Package Type : jar, war등)에 따라 각 단계에서 수행되는 Goal이 달라질 수 있음
    - Phases는 의존 관계를 가지고 있기 때문에 해당 Phase가 실행되기 위해서는 이전 단계의 Phase가 모두 수행되어야 함

라이프사이클의 각 단계
  - 라이프사이클(LifeCycle)이란 미리 정해진 빌드순서
  - maven은 프레임워크이기 때문에 작업 방식이 정해져있고, 빌드 순서가 정해져 있는데 이를 라이프사이클이라고 함
  - compile, test, package, install 등이 모두 maven의 빌드 라이프사이클에 속하는 단계
  - maven 프로젝트의 컴파일(mvn compile), 테스트(mvn test), 패키징(mvn package) 등의 과정
  - maven은 clean, build, site의 세 라이프사이클을 제공
    - 각 라이프사이클은 순서를 갖는 단계로 구성됨
    - 단계별 실행되는 플러그인 골(goal)이 지정되어 있기 때문에, 각 단계마다 지정된 작업이 실행됨
    - 라이프사이클에서 특정 단계를 실행하려면 다음과 같이 mvn[단계] 명령어를 입력 | mvn compile

라이프사이클의 주요 단계
  - generate-sources | 컴파일 과정에 포함될 소스를 생성함 
    - 예를 들어 DB 테이블과 매핑되는 자바 코드를 생성해주는 작업이 이 단계에서 실행됨
  - process-sources | 필터와 같은 작업을 소스 코드에 처리함
  - generate-resources | 패키지에 포함될 자원을 생성함
  - process-resources | 필터와 같은 작업을 자원 파일에 처리하고, 자원 파일을 클래스 출력 디렉토리에 복사함
    - 단계에 묶인 플러그인 실행 : resources:resources
  - compile | 소스 코드를 컴파일해서 클래스 출력 폴더에 클래스를 생성함
    - 단계에 묶인 플러그인 실행 : compiler:compile
  - generate-test-sources | 테스트 소스 코드를 생성함
    - 예를 들어 특정 클래스에서 자동으로 테스트 케이스를 만드는 작업이 이 단계에서 실행됨
  - process-test-sources | 필터와 같은 작업을 테스트 소스 코드에 처리함
    - 단계에 묶인 플러그인 실행 : resources:testResources
  - generate-test-resources | 테스트를 위한 자원 파일을 생성함
  - process-test-resources | 필터와 같은 작업을 테스트 자원 파일에 처리하고, 테스트 자원 파일을 테스트 클래스 출력 폴더에 복사함
  - test-compile | 테스트 소스 코드를 컴파일해서 테스트 클래스 출력폴더에 클래스를 생성함
    - 단계에 묶인 플러그인 실행 : compiler:testCompile
  - test | 테스트를 실행함
    - 단계에 묶인 플러그인 실행 : surefire:test
  - package | 컴파일된 코드와 자원 파일들을 jar, war와 같은 배포 형식으로 패키징함
    - 패키징에 따라 다름 : jar - jar:jar
                      war - war:war
                      pom - site:attach-descriptor
                      ejb - ejb:ejb
  - install | 로컬 리포지토리에 패키지를 복사함
    - 단계에 묶인 플러그인 실행 : install:install
  - deploy | 생성된 패키지 파일을 원격 리포지토리에 등록하여, 다른 프로젝트에서 사용할 수 있도록 함
    - 단계에 묶인 플러그인 실행 : deploy:deploy


표준 라이프사이클
  - clean : 빌드 시 생성되었던 산출물을 지움
  - default : 일반적인 빌드 프로세스를 위한 모델
    - test
    - package
    - deploy
  - site : 프로젝트 문서와 사이트 작업 수행

Profile
  - 서로 다른 대상 환경(Target Environment)을 위한 다른 빌드 설정
    1. 다른 운영 체제
    2. 다른 배포 환경
    - maven의 profile 기능은 이런 각 환경에 대해 이름을 붙이고 빌드 시 이 이름고 같이 빌드를 해서 이 환경 전용으로 빌드 설정
  - (-P) 옵션 사용
    mvn package -P prod | prod라는 이름의 환경에 맞춤형으로 빌드(package)
    pom.xml
  - Maven은 정상 절차 이외에 프로파일을 위한 절차를 추가로 수행
  - pom.xml 안에 <profiles></profiles> 태그 안에 각각의 <profile></profile> 선언


<profiles>
  <profile>
    <id>prod</id>
    <properties>
      <env>prod</env>
    </properties>
  </profile>
  <profile>
    <id>dev</id>
    <properties>
      <env>dev</env>
    </properties>
    <activation>
      <activeByDefault>true</activeByDefault>
    </activation>
  </profile>
</profiles>

  - <id> | 프로파일 이름
  - <activeByDefault> | 여러 프로파일들이 있지만 이 프로파일이 디폴트(기본 프로파일)라는 표시
                        (아무 설정없이 기본적으로 실행하면 dev라는 프로파일이 실행되도록 하는 태그)
  - <properties></properties> 설정 안에 있는 <env></env> 태그 | 프로파일마다 다른 경로의 설정 파일을 쓰고자할 때 사용

- 만약에 환경마다 사용하는 properties 파일이 다르다고 하면, <env></env> 태그 안에 경로 설정해주게 되고
- build 선언부에서 ${env}라는 변수로 해당 설정 사용 가능

<build>
  <resources>
    <resource>
      <directory>src/main/resources/common</directory>
    </resource>
    <resource>
      <directory>src/main/resources/${env}</directory>
    </resource>
  </resources>
</build>

  - 위의 경위 ${env}는 개발용 프로파일인 경우 dev(<env>dev</env>로 설정)
  - 배포용 프로파일인 경우 prod(<env>prod</env> 프로덕션용 폴더 설정해뒀음)

  

          











