스프링 프레임워크 (Spring Framework) 개요
  - 엔터프라이즈 어플리케이션 구축을 위한 포괄적인 솔루션

스프링의 장점
  - 우수한 생산성
    - 가볍고 모듈화되어 있어서 필요한 부분만 사용 가능
    - POJO 클래스와 몇 가지 설정만으로 개발 가능, 생산성 증가
  - 품질보증
  - 유지 보수 용이

EJB (Enterprise JavaBean)
  - 대규모, 복잡한 어플리케이션 구축을 위한 기술
    - 높은 클래스 의존성, 복잡성 같은 한계 발생
    - POJO는 단순 Java 객체를 사용하려는 의도에서 만들어짐

Spring 핵심 기술 | POJO
POJO (Plain Old Java Object)
  - 자바 언어 사양 외에 아무런 제약이 없는 Java 객체
  - 특정 환경과 관습에 의존하지 않도록 설계된 객체로, 필요에 따라 재사용 가능
  - 특정 클래스 상속이나 인터페이스 구현을 요구하지 않는 Java 클래스
    - public class Test extend Javax.servlet.http.HttpServlet()
  - 장점 1. 깔끔한 코드 생산
        2. 자동화 테스트 유리
        3. 객체지향 설계에 자유로움

POJO의 대표적인 예
  - Java Bean : 생성자와 Getter/Setter만 있는 단순한 Java 객체
대표적인 POJO 기반 프레임워크
  - Spring Framework : POJO의 장점을 활용하면서 EJB가 제공하는 엔터프라이즈 서비스와 기술을 사용할 수 있도록 돕는 프레임워크

PSA (Portable Service Abstraction)
  - 이식 가능한 서비스 추상화
  - 코드들을 비슷한 것들끼리 모으고 (강한 응집력), 서로 다른 코드들이 서로 구속하지 않는 (낮은 결합도) 프로그램 개발
  - 환경과 세부 기술의 변화에 관계없이 일관된 방식으로 기술에 접근하게 해주는 기술
  - PSA를 실현하기 위해서는 ? 
    - IoC/DI를 적극 활용해서 개발한다면 서비스 추상화는 자연스럽게 만들 수 있음
* IoC/DI : 제어 역전(Inversion of Control)과 의존성 주입(Dependency Injection)은 객체의 생성과 의존성 관리를 프레임워크나 컨테이너가 대신 처리하여,
            코드의 결합도를 낮추고 유연성을 높이는 디자인 패턴
* AOP (Aspect-Oriented Programming) : 핵심 비즈니스 로직과는 별개로 부관심(로깅,보안)들을 분리하여, 코드의 모듈화를 개선하는 프로그래밍 패러다임

스프링 프레임워크의 특징
  - POJO 기반 프레임워크
  - DI (의존성 주입) 지원
    - 의존 관계에 있는 객체를 생성하고 조립하는 기능
    - 각 계층 또는 서비스 간, 객체간 의존성이 있을 경우, 스프링 프레임워크가 이를 연결하여 약한 결합을 가능하게 함
  - AOP 지원
    - 공통 기능 분리 사용 가능 
    - 중복 코드를 줄이고, 개발자가 비즈니스 로직에만 집중할 수 있도록 도움

Model2 방식의 MVC Framework 지원
  - Model/View/Controller
  - JSP MVC보다 단순한 코드 구조 제공

Dispatcher Servlet
  - Client의 요청 (URL)
  - Dispatcher Servlet이 요청을 파악하고 요청 URL과 매칭되는 Controller 검색
  - 해당 Controller에 처리 요청
  - Controller가 요청을 처리 후 ModelAndView 리턴
  - DispatcherServlet이 ViewResoler를 통해 Controller의 실행 결과를 보여줄 View 검색
  - 해당 View를 응답으로 출력
